import numpy
import glob

datadirs = ['Data/Part1/',
    'Data/Part2/',
    'Data/Part3/',
    'Data/Part5/']
names = ['Trimming', 'Diginorm', 'Assembly', 'Transcription']
order = ['a', 'b', 'd', 'c']
# note: different zones!

def get_wall_ratio(triple):
    return triple[1] / triple[2]

def get_sys_ratio(triple):
    return triple[0] / triple[2]
    

def _get_time_all(filename):
    for line in open(filename):
        line = line.rstrip()
        if 'system' in line:
            fields1 = line.split('user')
            user = float(fields1[0])
            fields1b = line.split('system')[0].split()[-1]
            system = float(fields1b)
            walltime = line.split('elapsed')[0].split()[-1].rsplit(':')
            assert len(walltime) <= 3
            hours = 0.
            minutes = 0.
            seconds = walltime[-1]
            if len(walltime) == 3:
                hours = float(walltime[0])
                minutes = float(walltime[1])
            elif len(walltime) == 2:
                minutes = float(walltime[0])
            wall_seconds = hours*60*60 + minutes*60 + float(walltime[1])
            return float(system), float(user), float(wall_seconds)
    raise Exception(filename)
    
def get_time_all(filenames):
    aa, bb, cc = 0., 0., 0.
    for filename in filenames:
        a, b, c = _get_time_all(filename)
        aa += a
        bb += b
        cc += c
    return aa, bb, cc

def autolabel(rects):
    # attach some text labels
    for rect in rects:
        height = rect.get_height()
        ax.text(rect.get_x()+rect.get_width()/2., 1.05*height, '%d'%int(height),
                ha='center', va='bottom')

def get_time_mem(filename):
    "Extract the user time and max memory as generated by 'time' command"    
    for line in open(filename):
        line = line.rstrip()
        if 'system' in line:
            fields1 = line.split('user')
            time1 = float(fields1[0])
            fields1b = line.split('system')[0].split()[-1]
            time2 = float(fields1b)
            
            walltime = line.split('elapsed')[0].split()[-1].rsplit(':')
            assert len(walltime) <= 3
            hours = 0.
            minutes = 0.
            seconds = walltime[-1]
            if len(walltime) == 3:
                hours = float(walltime[0])
                minutes = float(walltime[1])
            elif len(walltime) == 2:
                minutes = float(walltime[0])
                
            wall_seconds = hours*60*60 + minutes*60 + float(walltime[1])
            
            time = wall_seconds
            fields2 = line.split('avgdata ')
            fields3 = fields2[1].split('max')
            mem = fields3[0]
            cpu_use = line.split('CPU')[0].split()[-1]
            return float(time), float(mem), cpu_use
    raise Exception(filename)

filesPart1 = glob.glob(datadirs[0] + '*')
filesPart2 = glob.glob(datadirs[1] + '*')
filesPart3 = glob.glob(datadirs[2] + '*')
filesPart5 = glob.glob(datadirs[3] + '*')

partTimes = {}
partTimes[0] = get_time_all(filesPart1)
partTimes[1] = get_time_all(filesPart2)
partTimes[2] = get_time_all(filesPart3)
partTimes[3] = get_time_all(filesPart5)

#Time stats
print "System,   User,    Time"
print
print
print "Execution time based on tutorial sections:"
print
for x in range(0, len(partTimes)):
    print names[x], 
    print partTimes[x]
print
print

#times for each code execution
commandTimes1 = {}
commandTimes2 = {}
commandTimes3 = {}
commandTimes5 = {}

for x in range(0, len(filesPart1)):
    commandTimes1[x] = _get_time_all(filesPart1[x])

for x in range(0, len(filesPart2)):
    commandTimes2[x] = _get_time_all(filesPart2[x])

for x in range(0, len(filesPart3)):
    commandTimes3[x] = _get_time_all(filesPart3[x])

for x in range(0, len(filesPart5)):
    commandTimes5[x] = _get_time_all(filesPart5[x])



print "Execution time of commands in " + names[0]+ ":"
print
for x in range(0, len(commandTimes1)):
    print (filesPart1[x])[11:], ' ', commandTimes1[x]

print 
print

print "Execution time of commands in " + names[1]+ ":"
print
for x in range(0, len(commandTimes2)):
    print (filesPart2[x])[11:], ' ', commandTimes2[x]

print
print

print "Execution time of commands in " + names[2]+ ":"
print
for x in range(0, len(commandTimes3)):
    print (filesPart3[x])[11:], ' ', commandTimes3[x]

print
print

print "Execution time of commands in " + names[3]+ ":"
print
for x in range(0, len(commandTimes5)):
    print (filesPart5[x])[11:], ' ', commandTimes5[x]

#memory stats
mem1 = {}
mem2 = {}
mem3 = {}
mem5 = {}

for x in range(0, len(filesPart1)):
    mem1[x] =get_time_mem(filesPart1[x])

for x in range(0, len(filesPart2)):
    mem2[x] =get_time_mem(filesPart2[x])

for x in range(0, len(filesPart3)):
    mem3[x] =get_time_mem(filesPart3[x])

for x in range(0, len(filesPart5)):
    mem5[x] =get_time_mem(filesPart5[x])


print "Execution time, max memory and CPU usage of commands in " + names[0]+ ":"
print
for x in range(0, len(mem1)):
    print (filesPart1[x])[11:], ' ', mem1[x]

print 
print

print "Execution time, max memory and CPU usage of commands in " + names[1]+ ":"
print
for x in range(0, len(mem2)):
    print (filesPart2[x])[11:], ' ', mem2[x]

print
print

print "Execution time, max memory and CPU usage of commands in " + names[2]+ ":"
print
for x in range(0, len(mem3)):
    print (filesPart3[x])[11:], ' ', mem3[x]

print
print

print "Execution time, max memory and CPU usage of commands in " + names[3]+ ":"
print
for x in range(0, len(mem5)):
    print (filesPart5[x])[11:], ' ', mem5[x]